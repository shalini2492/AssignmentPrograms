package DataStructureprograms;

import Utility.Utility;

public class LinkLIst<T> {
Node<T> head;
T data;
Node<T> next;

int count=0;

Node<T> n = new Node();
T temp = head;
public void add(T a)
{
	
	head.data = a;
	if(n != null)
	{
		n.data = a;
		n.next=null;
	}
	else
		head.data = a;
	while(n != null)
	{
		System.out.println(n.data);
		n.data = a;
		n.next=null;
	}
	System.out.println(n.data);
	}
public void remove(T a)
{
	int position=0;
	if(head == a)
	{
		return;
	}
	
	if(a == null)
	{
		return;
	}
   if(position == 0)
   {
	   head =temp.next;
   }
   for(int i=0; temp!=null && i<position-1; i++)
   {
	   temp = temp.next;
	   
   }
	
}
public void searchItem(T a)
{
	Node<T> curr = head;
	while(curr!=null)
	{
		curr.data = a;
		curr = curr.next;
	}
}
public int isEmpty()
{
	if(head == null);
	return 0;	
}
public int size()
{
	return count;
}
public void append(T a)
{
	Node new_node = new Node(a);
	if(head == null)
		{
			head = new Node(a);
			return;
		}	
	new_node.next=null;
	Node last=head;
	while(last.next != null)
	{
		last=last.next;
		last.next=new_node;
	}
}
public int index(T a)
{
	int pos;
	if(head.next==null)
	{
		return 1;
	}
	for(int i=0; i<10; i++)
	{
		if(i==pos)
		{
			return pos;
		}
	}
	return a;
}
public void insertItem(T a, int pos)
{
	Node<T> da = new Node<>(a);
	da.data = a;
	da.next = null;
	if(head == null)
	{
		return da;
	}
	if(pos == 0)
	{
		da.next=head;
		head=da;
	}
		for(int i=0; i<pos; i++)
		{
			if(i == pos)
			{
				n.data=a;
				n.pre = n.pre.next;
				n.next= n.next.pre;
			}
		}
}
public void pop()
{
	int pos;
if(pos == 1)
{
	head = null;
}
else
	
	temp=n.data;
	for(int i=0; i<10; i++)
	{
		if(i==0)
		{
			n.data=n.pre.data;
			n.pre.next = null;
			
		}
	}
}
public void pop(int pos)
{
	if(pos == 1)
	{
		head=null;
	}
	for(int i=0; i<10; i++)
	{
		if(i ==pos)
		{
			n.pre.next=n.next.next.pre;
			
		}
	}
}
public void display()
{
	for(int i=0; i<10; i++)
	{
		System.out.println(n.data+ "->");
	}
}

}