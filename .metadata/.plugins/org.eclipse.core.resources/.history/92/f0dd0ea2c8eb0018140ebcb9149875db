package Utility;

import java.util.*;

public class Utility 
{
	
	Utility utility = new Utility();
	Scanner sc = new Scanner(System.in);
    public String inputString()
    {
    	return sc.nextLine();
    }
    public int inputInteger()
    {
    	return sc.nextInt();
    }
    public String replaceString(String template, String username)
    {
    	System.out.println("Enter username ");
    	if(username.length() < 3)
    	{
    		System.out.println("Please enter string of more than 3 characters");
    	}
    	else
    	{
    		String str = utility.replaceString("<<username>>", username);
    	    return str;
    	}
    	return template;
    }


/***********************************Flip coin******************************/

   static Random random = new Random();
public int HeadorTail(int n)
{
	long headper=0, tailper=0;
	int headcount=0, tailcount=0;
	//int heads, tail, n,i;
	
	
	System.out.println("Enter the no. of times you want to flip the coin");
	       if(n < 0)
	       {
		       System.out.println("Please enter valid no.");
		       n = sc.nextInt();
		       HeadorTail(n);
	       }
	
	/****Here input is checked whether it is valid or not. And if invalid then user is requested
	 * to enter a valid input and the method is called inside a method again.
	 * 
	 */
	     for(int i=0; i<n; i++)
	     {
		        double rand = Math.random();
	            System.out.println("Random no. are" +rand);
                  if(rand < 0.5)
	                    {
	    	                 System.out.println("The occurrence of tail" +i);
	    	                 tailcount = tailcount + 1;
	                    }
	               else
	    		             System.out.println("The occurrence of heads" +i);
 			                 headcount = headcount +1;
	    	
	     }
	
	/***Here the for loop to read random no. generated by using random() and then checked 
	 * if coin is head or tail after flipping. Headcount and tailcount are incremented 
	 * for computing headcount vs tailcount.
	 */
	
	                    System.out.println("Head count" +headcount);
	                     System.out.println("tail count" +tailcount);
	


/***Here headcount and tailcount is computed so as to compare their count and display output.
* 
*/
	
	            if(headcount>tailcount)
	                 {
		                    System.out.println("Headcount is greater");
	                 }
	           else
		                    System.out.println("tailcount is greater");

}
	

/*********************Leap Year*****************************/

public void LeapYear(int yearno) 
{
	/**This method will check if the user input is of 4-digit and if it is invalid 
	 * then method is called recursively requesting user a valid input. valueOf method
	 * is used of String class to obtain value of yearno. and then its length is
	 * calculated and checked.
	 */
	   if(String.valueOf(yearno).length()<4)
           	{
		             System.out.println("Enter 4-digit year");
		             yearno = sc.nextInt();
		             LeapYear(yearno);
		
	            }
	   else
	                 utility.checkLeapYear(yearno);

}


public void checkLeapYear(int yearno)
{
	if(yearno%4 == 0) /**This method will check if given year is a leap year.*/
     {
	        if(yearno%100 == 0) /*when all these conditions will be true the we can say
	                                   given year is a leap year.*/ 
                {
		                if(yearno%400 == 0)
	                         {
		                          System.out.println(yearno+ "is a leap year");
	                         }
                 }
      }
	else
		      System.out.println(yearno+ "is not a leap year");
}


/*************************Power 2********************************/

public int power(int pow, int base)
{
	int i;
	System.out.println("Enter the power"); 
	      if(pow > 31) /*The input taken by the user should not exceed beyond 31. If
	                           it is more than 31 then user is requested to reenter new and valid input.*/
	            {
		                 System.out.println("Please enter valid power");
		                 pow = sc.nextInt();
	                     power(pow, base);
	            }
	      else
		                 utility.calculat(i);
	 
}

private int calculat(int i)
{
	int base=2, pow=1;
	      for(i=0; pow<i; i++)
	          {
		            pow = pow*base;
	          }
	                System.out.println("2 to the power" +pow+ "is" +i);
}

/********************Harmonic Number*****************************/

public void harmonicNo()
{
        int sum;
        while(sum != 0)
	  
            {
	                for(int i=2; i<sum; i++)
	                      {
	                             sum += (double) 1/i;
	                      }
	  
            }
             System.out.println("The harmonic no. is" +sum);

}

/**********************Prime Factorization**************************/

public int factors(int n)
{
	    if(n%2 == 0)
	          {
		             System.out.println("" +n);
	          }
	    else
		             System.out.println("");
	            for(int i=3; i<n; i=i+2)
	                  {
		                    while(n%i == 0)
		                       {
		                             System.out.println("" +i);
	                           }
                     }
}

/************************Gambler*************************************/

public void gambling(int stake, int trials, int target)
{	
	/*for loop to iterate till the no. of trials */
	int won=0, bet=0;
	int cash;
	            for(int t=0; t < trials; t++) 
	                    {
		                    cash = stake;  
		                    while(cash > 0 && cash <= target)
		                         {
			                           bet++;
			                           if(Math.random() < 0.5)
				                       cash++;
			                           else
				                       cash--;			
		                         }
		                   if(cash == target)		
			                            won++;		
	                    }
	
	System.out.println(won+ "wins of" +trials);
	System.out.println("Percentage of win over trials "  +100 * won/trials);
	System.out.println("Average # bet       " +1.0 *bet/trials);
}


/*************************Distinct Coupon Number************************/

public int dist_coupon(int n)
{
	   for(int i=0; i<n; i++)
	          {
	                 double randno= Math.random();
	                 if(i != randno)
	                      {
		                         System.out.println(i+ "is a distinct coupon number");
	                      }
	                 else
		                         System.out.println("Not  a distinct coupon number");
	
             }
}

/***********************2D array*****************************************/
/*This method will return input of type boolean*/

public boolean InputBoolean()
{
	return sc.nextBoolean();
}

/*This method will return input of type double.*/

public double InputDouble()
{
	return sc.nextDouble(); /*Scans the next token of the input as a double. This 
	method will throw InputMismatchException if the next token cannot be 
	translated into a valid double value.Scans the next token of the input as
	 a double. */ 
}

public void twodarr(int row, int column)
{
	        int[][] a= new int[row][column];
	        for(int i=0; i<row; i++)
	             {
	                	for(int j=0; j<column; j++)
		                     {
		                          a[i][j]= sc.nextInt(); /* Reads the integer value from user.*/
		                     }
	             }
	        for(int i=0; i<row; i++)
	             {
		                 for(int j=0; j<column; j++)
		                     {
			                      System.out.print(a[i][j]+ "");  //printing the array.
		                     }
	                              System.out.println(" ");
	             }
	
}

/********************Sum of Three integers************************/

public int triplets(int a[])
{

	int b[], n;
	boolean flag;  // flag to check if the sum of triplets is 0. Returns true if the 
	//result is non-zero.
	for(int i=0; i<n-2; i++)
	{
		for(int j=i+1; j<n-1; j++)
		{
			for(int k=j+1; k<n; k++)
			{
				if(a[i]+a[j]+a[k] == 0) //checks whether sum is zero or non-zero.
				{
					
					flag = false;;
				}
			}
		}
	}
}



/*************************Distance calculation*************************/

public void dist(int i, int j)
{
	int x = 0, y=0;
	
 double c = Math.pow(x, 2);  //Returns x*x.
 double d = Math.pow(y, 2);  //Returns y*y.
 double dn = c * d;         
 double diff = (c-i) * (d-j);
 
}

/**********************String Permutation******************************/

public void swap(String[] ch, int i, int j)
{
	/* This method is used to swap values from location i and i+1. We use temp 
	 * variable for this purpose.
	 */
	String temp= ch[i];
	ch[i]=ch[j];
	ch[j] = temp;
}

public String per(String[] ch, int cindex)
{
	   int j;
	   j = utility.InputInteger();  
	   ch = new String[j]; 
	
	       if(cindex == (ch.length-1))  /*original string ch and cindex is set as its 
		                             length-1. Means currentindex is ch[i+1] and then remianing elements 
		                             are swapped using swap() method iteratively. */
	                  {
		                    System.out.println(String.valueOf(ch));
     	              }
	             for(int i = cindex; i< ch.length; i++)
	                     {
	                           swap(ch, cindex, j);     //iterative swap() method.
	                           utility.per(ch, cindex+1); /* recursive per() method. Here currentindex is 
	                                                      incremented. and again swap method is called. */
	                           swap(ch, cindex, j);
	                     }
}

/************************Stopwatch*********************************/

public void stopWatch(int startTime, int stopTime)
{
	startTime=0;
	stopTime=0;
	
	int elapsedTime, diff, ch;
	
	long start;
	start = System.currentTimeMillis();
	long now = System.currentTimeMillis();
	System.out.println((now-start)/1000.0);
}


/************************TicTacToe***********************************/

public void playGame(int x)
{
	    Random random = new Random(); //Random instance is created for generating 
	                                //random no.
	    int row, column, cellno;
	    int won;
	    int[][] a =new int[row][column];

	    for(int i=0; i < row; i++)
	              {
		               for(int j=0; j < column; j++)
		                   {
   	                         cellno = a[row][column];
	                             cellno = utility.InputInteger();
		                   }
	               }
	column= row;
	for(int i=0; i==row; i++)
	    {
	         if(a[row][column] == 'X')
	             {
		               won++;
	             }
	        else
		               won--;
	    }
}

/*************************Quadratic*******************************/

public String quad(int a, int b, int c)
{
	a = utility.InputInteger();
	
	double k, root1, root2;
	if(k > 0)
	    {
		           root1 = (-b + (Math.sqrt(k) / (2 * a)));
		           root2 = (-b - (Math.sqrt(k) / (2 * a)));
		           System.out.println("First root:" +root1);
		           System.out.println("Second root" +root2);
	    }
	   else if(k == 0)
	        {
		          root1 = (-b + (Math.sqrt(k) / (2 * a)));
		          System.out.println("First root is:" +root1);
	        }
	   else
		          System.out.println("Roots are imaginary");
}

/******************************WindChill********************************/

public double calTemp(double temp, double speed)
{
	double cal;
	temp = utility.InputDouble();
	speed = utility.InputDouble();
	           if(temp > 50 || speed <3 || speed > 120)
	                    {
	                        System.out.println("Please enter valid temperature");
	                        temp = sc.nextDouble();
	                        System.out.println("Please enter valid speed");
	                        speed = sc.nextDouble();
	                        calTemp(temp, speed);
	                    }
	           else
		          cal = 35.74 + 0.6215 * temp + (0.4275 * temp - 35.75) * Math.pow(speed, 0.16);
	              return cal;
}

/**************************Algorithm Programs************************************/

/*************************Check for Anagram****************************/

public String checkAnagram(String s1, String s2)
{
	if(s1.replaceAll(" ", "").length() == s2.replaceAll(" ", "").length())
	  {
	            char[] char1 = s1.toLowerCase().toCharArray();
		        char[] char2 = s2.toLowerCase().toCharArray();
	
	            Arrays.sort(char1);
	            Arrays.sort(char2);
	
  if(Arrays.equals(char1, char2))
  	     {
		       System.out.println("Given strings are anagram");
	     }
  else 
	           System.out.println("Given strings are not anagram");
		
    }
}

/**********************Prime no.*****************************/

public int prime(int[] x)
{
	int i, n=1000;
	n = sc.nextInt();
	int[] a= new int[n];
	   if(i%i == 0 && i%1 == 0) //Only the nos divisible by itself and 1 are returned.
	        {
		          System.out.println(a[i]);
	        }
}

public int primdrome(int[] a)
{
 int i, j;
 int[] c = new int[1000];
 if(c[i] == c[j])
 {
   System.out.println(c[i]);
 }
           for(i=0; i<1000; i++)
                {
	                     if(c[i+1] == c[i-1])
	                             {
	                                  System.out.println(c[i]);
	                                  primdrome(a);
	                             }
	                     else
		                              System.out.println("");
                }
}

/***********************Binary Search for Integer**********************/

public int searchBinary(int[] k, int s, int e)
{
	int x, i, j;
   int mid = (s + (e-1))/2; //mid value is calculated.
              if(x == mid) //checked if mid value is the key or not.
                   {
   	                   return mid;
                   }
              else 
   	             if(x > mid)    //if key is in first half part then recursive method is used.
   		                         //mid is set start and end is decremented by 1. 
   	                  {
   		                   return searchBinary(k, mid, e-1);
   	                  }
   	else // If key is in second half part of array then recursive method is used.
   		// Now the mid is incremented and set as start of array and end is kept
   		//as it is.
   		return searchBinary(k, mid+1, e);
}

/*********************Binary Search for String****************************/

public String searchStr(String s[])
{
	int i, k, start, end;
	int mid= (start + (end-1) / 2); /* Mid element is calculated by taking the sum of 
	start and end position of array and dividing it by 2. */ 
	k = mid;
	if(s[k] == s[mid])
	    {
		          System.out.println("Element searched:" +s[k]);
	    } 
	else if(k > mid)
	    {
		          start = mid;
		          end = end -1;
		          return searchStr(s);
		
	    }
	else
		          start = mid + 1;
		          return searchStr(s);
}


/*********************Insertion Sort for Integer*************************/

public int insertionSort(int[] s)
{
	int in, index;
	s[0] = s[index];
	    for(int i=0; i < s[index]; i++)
	         {
		            System.out.println("");
		            in = utility.InputInteger();
	                insertionSort(s);
	         }
}



