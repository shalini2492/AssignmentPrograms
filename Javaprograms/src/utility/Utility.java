package utility;
/* import java.awt.*;

import java.awt.List;
import java.text.SimpleDateFormat;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.InputStreamReader;
import java.io.RandomAccessFile;
import java.lang.reflect.Array;*/
import java.util.*;

import static java.lang.Math.sin;
import static java.lang.Math.cos;
//import Algorithmprograms.InsortStr;
//import DataStructureprograms.LinkLIst;
import static java.lang.Math.sqrt;

public class Utility 
{
	
	
	static Scanner sc = new Scanner(System.in);
	/*This method will read and accept input of type string and can be called using 
	 * object of class
	 */
    public static String inputString()
    {
    	return sc.nextLine();
    }
    /*This method will read and accept input of type integer and can be called
     * using object of class.
     */
    public static int inputInteger()
    {
    	return sc.nextInt();
    }
    
    /***********************2D array*****************************************/
    /*This method will return input of type boolean and pass it to the method where it is called */

    public static boolean InputBoolean()
    {
    	return sc.nextBoolean();
    }

    /*This method will return input of type double and pass it to the method where it is called.*/

    public static double InputDouble()
    {
    	return sc.nextDouble(); /*Scans the next token of the input as a double. This 
    	method will throw InputMismatchException if the next token cannot be 
    	translated into a valid double value.Scans the next token of the input as
    	 a double. */ 
    }
    /**********************String Replace*************************/
    
    public static String replaceString(String template, String username)
    {
    	
    	if(username.length() < 3)
    	{
    		System.out.println("Please enter string of more than 3 characters");
    	}
    	else
    	{
    		String str = template.replace("<<username>>", username);
    	    return str;
    	}
    	return template;
    }


/***********************************Flip coin******************************/

 //static Random random = new Random();
public static int HeadorTail(int n)
{
	long headper=0, tailper=0;
	int headcount=0, tailcount=0;
	//int heads, tail, n,i;
	
	
	System.out.println("Enter the no. of times you want to flip the coin");
	       if(n < 0)
	       {
		       System.out.println("Please enter valid no.");
		       n = sc.nextInt();
		       HeadorTail(n);
	       }
	
	/****Here input is checked whether it is valid or not. And if invalid then user is requested
	 * to enter a valid input and the method is called inside a method again.
	 * 
	 */
	     for(int i=0; i<n; i++)
	     {
		        double rand = Math.random();
	            System.out.println("Random no. are " +rand);
                  if(rand < 0.5)
	                    {
	    	                 System.out.println("The occurrence of tail" +i);
	    	                 tailcount = tailcount + 1;
	                    }
	               else
	    		             System.out.println("The occurrence of heads" +i);
 			                 headcount = headcount +1;
	    	
	     }
	
	/***Here the for loop to read random no. generated by using random() and then checked 
	 * if coin is head or tail after flipping. Headcount and tailcount are incremented 
	 * for computing headcount vs tailcount.
	 */
	
	                    System.out.println("Head count" +headcount);
	                     System.out.println("tail count" +tailcount);
	


/***Here headcount and tailcount is computed so as to compare their count and display output.
* 
*/
	
	            if(headcount>tailcount)
	                 {
		                    System.out.println("Headcount is greater");
	                 }
	           else
		                    System.out.println("tailcount is greater");
    return n;
}
 
/*****************************************Leap Year*****************************************/

public static boolean LeapYear(int yearno) 
{if(yearno > 1000)
{
	   if(((yearno % 4 == 0) && (yearno % 100 != 0)))
	   {
		   if((yearno % 400 == 0))
		   {
	       return true;
		   }
	   }
	}
	return false;
}

public static String checkLeapYear(int year) {  
	if (year >= 1000 && year <= 9999) {
		if (year % 400 == 0 || (year % 4 == 0 && year % 100 != 0 && year >= 1582)) {

			return "Leap Year";
		} 
		else 
		{

			return "not a Leap Year or year should be more than 1582";
		}
	} 
	else 
	{
		return "Wrong input";
	}
}

/*******************************Print three names in reverse order***********************/

public static void reversePrint(String output)
{
	String firstName="Alice";
	String secondName="Bob";
	String thirdName="Carol";
	System.out.println("Java " +firstName+ ", " +secondName+ " and " +thirdName);
	System.out.println("After reversing names....");
	System.out.println("Hi " +thirdName+ ", " +secondName+ " and " +firstName);
	
}


/*************************Power 2********************************/

public static int power(int pow, int base)
{
	int i;
	System.out.println("Enter the power"); 
	      if(pow > 31) /*The input taken by the user should not exceed beyond 31. If
	                           it is more than 31 then user is requested to reenter new and valid input.*/
	            {
		                 System.out.println("Please enter valid power");
		                 pow = sc.nextInt();
	                     power(pow, base);
	            }
	      
	      else
	      {
	    	   base=2;
	      
	             for(i=0; pow<i; i++)
	                  {
		                  pow = pow*base;
	                  }
	                      System.out.println("2 to the power" +pow+ "is" +i);
	      }
	      return pow;
}

/*************************Power of 2*****************************/

public static void powertwo(int number)//input validation
{
	System.out.println("Printing all till Power Value "+number);
	   
	   
    for(int i=1;i<=number;i++)
    {
     	System.out.println("Power of 2^"+i+" is: "+(Math.pow(2, i)));	
    }
}

/********************Harmonic Number*****************************/

public static void harmonicNo(int number)
{
	System.out.println("The Harmonic series is :");
	double result =0.0;
	while(number > 0)
	{
		result = result + (double) 1/number;
		number--;
		System.out.println(result+ " ");
	}
	System.out.println(" ");
}

/***********************************Prime Factorization*****************************************/

public static int factors(int n)
{ 
	while(n%2 == 0)
	{
		System.out.println("");
		n/=2;
	}
	for(int i=2; i<Math.sqrt(n); i+=2)
	{
		while(n%i == 0)
		{
			System.out.println(i);
			n/=i;
		}
	}
	return n;
}
/*********************************************Gambler****************************************************/

public static void gambling(int stake, int trials, int target)
{	
	/*for loop to iterate till the no. of trials */
	int win = 0;
	int loss = 0;

	for (int i = 0; i < trials; i++) {
		while (stake < target && stake > 0 && trials > 0) {
			if (Math.random() >= 0.5)
			{
				stake++;
				win++;
				trials--;
			} 
			else 
			{
				stake--;
				loss++;
				trials--;
			}
		}
	}
	double percentWin = (win * 100) / (win + loss);
	double percentLoss = (loss * 100) / (win + loss);
	System.out.println("the player won " + win + " times.");
	System.out.println("the player lost " + loss + " times.");
	System.out.println("percentage of win is " + percentWin + "%");
	System.out.println("percentage of loss is " + percentLoss + "%");
}


/*************************************Distinct Coupon Number*****************************************/

public static int dist_coupon(int n)
{
	   for(int i=0; i<n; i++)
	          {
	                 double randno= Math.random();
	                 if(i != randno)
	                      {
		                         System.out.println(i+ "is a distinct coupon number");
	                      }
	                 else
		                         System.out.println("Not  a distinct coupon number");
	
              }
	   return n;
}

/******************************************************2D Array*******************************************/

public static void twodarr(int row, int column)
{
	        int[][] a= new int[row][column];
	        for(int i=0; i<row; i++)
	             {
	                	for(int j=0; j<column; j++)
		                     {
		                          a[i][j]= sc.nextInt(); /* Reads the integer value from user.*/
		                     }
	             }
	        for(int i=0; i<row; i++)
	             {
		                 for(int j=0; j<column; j++)
		                     {
			                      System.out.print(a[i][j]+ " ");  //printing the array.
		                     }
	                              System.out.println(" ");
	             }
	
}

/***********************************Sum of Three integers*****************************************/

public static int[] triplets(int a[])
{

	int n=10;
	a = new int[n];
	boolean flag=true;  // flag to check if the sum of triplets is 0. Returns true if the 
	//result is non-zero.
	for(int i=0; i<n-2; i++)
	{
		for(int j=i+1; j<n-1; j++)
		{
			for(int k=j+1; k<n; k++)
			{
				if(a[i]+a[j]+a[k] == 0) //checks whether sum is zero or non-zero.
				{
					
					flag = false;
				}
			}
		}
	}
	if(flag == true)
	{
		System.out.println("The sum is non-zero");
	}
	else
		System.out.println("The sum is 0.");
	return a;
}



/******************************************Distance calculation***************************************/

public static void dist(int i, int j)
{
	int x = 0, y=0;
	
  double c = Math.pow(x, 2);  //Returns x*x.
  double d = Math.pow(y, 2);  //Returns y*y.
  double dn = c + d;         
  double diff = (c-i) * (d-j);
  System.out.println("The distance from (" +x+ "," +y+ ") to (0,0) is " +diff);
}

/**************************************String Permutation********************************************/

public static void permutation(String inputString) 
{
	String permuteString="";
	permuteString(permuteString,inputString);
   
}

public static void permuteString(String permuteString, String inputString) 
{
	if (inputString.length() == 0) 
	{
		System.out.println(permuteString);
	} 
	else 
	{
		for (int i = 0; i < inputString.length(); i++) 
		{
			permuteString(permuteString + inputString.charAt(i),inputString.substring(0, i) + inputString.substring(i + 1, inputString.length()));
		}
    }
}



/********************************************Stopwatch************************************************/

public static void stopWatch(long startTime, long stopTime)
{
	int flag=0;
	int input=1;
	while(flag==0)
	{
		switch(input)
		{
		case 1:
			startTime=System.nanoTime();
			System.out.println("enter 0 to stop the stopwatch");
			input=Utility.inputInteger();
			break;
		case 0:
			stopTime=System.nanoTime();
			flag=1;
			break;
		default:
			System.out.println("enter a valid option");
		}
	}
	double elapsedTime=(stopTime-startTime)/Math.pow(10, 9);
	System.out.println("startTime= "+startTime);
	System.out.println("stopTime= "+stopTime);
	if(startTime!=0)
	{
		System.out.println("elapsedTime= "+elapsedTime+" in seconds");
	}
	else
		System.out.println("To start the stopwatch you should have pressed 0 only");
}


/******************************************TicTacToe****************************************************/

/*public void playGame(int x)
{*/
	    //Random random = new Random(); //Random instance is created for generating 
	 static String[] cell=new String[9];
	 String turn;

	public static void printCell() 
	{
		System.out.println("/---|---|---\\");
		System.out.println("| " + cell[0] + " | " + cell[1] + " | " + cell[2] + " |");
		System.out.println("|-----------|");
		System.out.println("| " + cell[3] + " | " + cell[4] + " | " + cell[5] + " |");
		System.out.println("|-----------|");
		System.out.println("| " + cell[6] + " | " + cell[7] + " | " + cell[8] + " |");
		System.out.println("/---|---|---\\");
	}

	public static void populateEmptyCell() 
	{
		for (int a = 0; a < 9; a++) {
			cell[a] = String.valueOf(a+1); //string representation of integer is returned.
	}
}
	
/********************************************Quadratic*********************************************/

//static double k, root1, root2;
public static void quad(int a, int b, int c)
{
	if(a==0)
	{
		System.out.println("Invaild");
		return;
	}
	
	int d = b*b - 4*a*c;  
	double sqrt_val = sqrt(d);
	if(d > 0)
	{
		System.out.println("Roots are real and different");
		System.out.println((double)(-b + sqrt_val) / (2*a)+"\n"+
   					   	   (double)(-b - sqrt_val) / (2*a));
	}	
	else
	{
		System.out.println("Roots are complex \n"); 
        System.out.println( -(double)b / ( 2 * a ) +"+i"+sqrt_val +"\n"+
        					-(double)b / ( 2 * a ) +"-i"+sqrt_val);
	}
}

/***************************************************WindChill************************************************/

public static void calTemp(double temp, double speed)
{
	           double cal=0;
	           if(temp > 50 || speed <3 || speed > 120)
	           {
	               System.out.println("Please enter valid temperature and speed");
	               temp = Utility.InputDouble();
	               speed = Utility.InputDouble();
	               calTemp(temp, speed);
	           }
		          cal = 35.74 + 0.6215 * temp + (0.4275 * temp - 35.75) * Math.pow(speed, 0.16);
	           System.out.println("Windchill: " +cal);
	           //  return cal;
}

/*********************************************Integer Operations*************************************/

/**
 * @param a
 * @param b
 * @param c
 * @return
 */
public static void intOpt(int a, int b, int c)
{
	//a=10, b=10, c=10;
	
	System.out.println("First operation result: " +(a+(b*c))); //Integer operations are performed using circular parantheses 
	System.out.println("Second operation result: " +((a*b)+c)); // to obtain correct output
	System.out.println("Third operation result: " +(c+(a/b)));
	System.out.println("Fourth operation result: " +((a%b)+c));
	
}

/**********************************************Double Operations*************************************/

public static void doubleOpt(double a, double b, double c)
{
	//a=10, b=10, c=10;
	
	System.out.println("First operation result: " +(a+(b*c)));
	System.out.println("Second operation result: " +((a*b)+c));
	System.out.println("Third operation result: " +(c+(a/b)));
	System.out.println("Fourth operation result: " +((a%b)+c));
	
}

/******************************************Spring Season**************************************/

public static boolean springSeason(int day, int month)
{
	boolean isSpring = (month == 3 && day >= 20 && day <= 31)
            || (month == 4 && day >=  1 && day <= 30)
            || (month == 5 && day >=  1 && day <= 31)
            || (month == 6 && day >=  1 && day <= 20);
	return (isSpring);
}

/**************************************Random number operations************************************/

public static void avg(double a, double b, double c, double d, double e)
{
	int i=5;
	int angle=90;
	a= Math.random(); //5 random numbers from 0 10 1 are generated and taken in variables.
	b=Math.random();
	c= Math.random();
	d= Math.random();
	e = Math.random();
	double count = Math.sin(Math.toDegrees(angle));
	System.out.println("Math.todegrees(): " +count);
	double min = Math.min(a, b);  //Min value is calculated using in built functions
	double max = Math.max(a, b);  //Max value is calculated using in built functions
	double avg = (min + max) / 2; //average value is calculated by taking min and max values.
	
}

/***************Calculating min, max and average value of 5 random numbers********************/

public static void statsRandom(double result)
{

	double a = Math.random();
	double b = Math.random();
	double c = Math.random();
	double d = Math.random();
	double e = Math.random();
	System.out.println(a);
	System.out.println(b);
	System.out.println(c);
	System.out.println(d);
	System.out.println(e);
	double min = Math.min(a, (Math.min(b, (Math.min(c, (Math.min(d, e)))))));
	double max = Math.max(a, (Math.max(b, (Math.max(c, (Math.max(d, e)))))));
	double avg = (min + max) / 2;
	System.out.println("Minimum value: "+min);
	System.out.println("Maximum value: "+max);
	System.out.println("Average value: "+avg);
}

/******************************Trigonometric function SinCos*********************/

public static void sincos(double angle)
{
	angle = Math.toDegrees(angle);
	double a = Math.sin(Math.toRadians(angle));
	double b = Math.cos(Math.toRadians(angle));
}

/********************************Sin*************************************/

/*This method will compute the sine value of given input angle and will convert it to radians and then return take sine value and return.
*/
public static void sine(double n)
{
	int theta=sc.nextInt();
	double radians=Math.toRadians(theta);
	int pow=1;
	double sinx=0.0;
	for(int i=1; i<=n; i++)
	{
		double current_term=0.0;
		if(i%2 == 0)
		{
	        current_term = -Math.pow(radians, pow)/ fact(pow);
		}
		else
		{
			current_term = Math.pow(radians, pow)/ fact(pow);
		}
		sinx = sinx + current_term;
	     pow = pow + 2;
	}
	System.out.println(sinx);
	
/*	double acc= (double) 0.0001, denominator, sinx, sinval;
	 n = n * (double) (3.142 / 180.0);
	 double x1 = n;
	 sinx = n;
	 sinval = (double) sin(n);
	 int i=1;
	 do
	 {
		 denominator = 2 * n * (2 * n + 1);
		 x1 = -x1 * n * n/ denominator;
		 sinx = sinx + x1;
		 i = i + 1;
	 }while(acc <= sinx - sinval);
	 System.out.println(sinx);*/
}

public static int fact(int no)
{
	int fact=1;
	for(int i=0; i<no; i++)
	{
		fact = fact*i;
	}
	return fact;
}
/***************************Cosine********************************/

/*This method will calculate the cosine value of user input angle and will return cosine value*/

public static void cosine(double x)
{
	int theta=sc.nextInt();
	double radians=Math.toRadians(theta);
	int pow=1;
	double cosx=0.0;
	for(int i=1; i<=x; i++)
	{
		double current_term=0.0;
		if(i%2 == 0)
		{
	        current_term = Math.pow(radians, pow)/ fact(pow);
		}
		else
		{
			current_term = -Math.pow(radians, pow)/ fact(pow);
		}
		cosx = cosx + current_term;
	     pow = pow + 2;
	}
	System.out.println(cosx);
	
/*	double accuracy = (double) 0.0001, x1, denominator, cosx, cosval;
	x = x * (double) (3.142/180.0); //converting degrees to radian
	x1 = 1; //maps the sum along the series
	cosx = x1;
	cosval = (double) cos(x); //This method will calculate cosine value of given angle x
	int i=1;
	do
	{
		denominator = 2 * x * (2 * x - 1); //denominator is calculated which is given as 2x(2x-1)
		x1 = -x1 * x * x/denominator; //denominator is divided with numerator to get exact cosine value
		cosx = cosx + x1; //next series.
		i = i + 1; //to evaluate do-while loop i is incremented.
		
	}while(accuracy <= cosx - cosval);
	System.out.println("Cosine value of angle " +x+ " is: " +cosx);*/
}

/***********************************Find repeated number******************************/

public static void findRepeatedNo(int[] data, int size)
{
	System.out.println("Repeated elements are: ");
	for(int i=0; i <= 100; i++)
	{
		for(int j=i+1; j <= 100; j++)
		{
			if(data[i] == data[j])
			{
				System.out.println(data[i]+ " ");
			}
		}//check for multiple copies of element...
	}
//return data;
}

/**********************Find second largest element in array
 * @return *********************/

public static void findSecondLarge(int[] input)
{
	
	 int firstLargest, secondLargest;
	 
     //Checking first two elements of input array

     if(input[0] > input[1])
     {
         //If first element is greater than second element

         firstLargest = input[0];

         secondLargest = input[1];
     }
     else
     {
         //If second element is greater than first element

         firstLargest = input[1];

         secondLargest = input[0];
     }

     //Checking remaining elements of input array

     for (int i = 2; i < input.length; i++)
     {
         if(input[i] > firstLargest)
         {
             //If element at 'i' is greater than 'firstLargest'

             secondLargest = firstLargest;

             firstLargest = input[i];
         }
         else if (input[i] < firstLargest && input[i] > secondLargest)
         {
             //If element at 'i' is smaller than 'firstLargest' and greater than 'secondLargest'

             secondLargest = input[i];
         }
     }

     System.out.println("Second largest element in array is: "+secondLargest);

	

}

/*****************************Find the second smallest element in array********************/

public static void findSecondSmall(int[] in)
{
	int firstSmallest, secondSmallest;
	
	//Checking first 2 elements of input array
	
	if(in[0] < in[1])
	{
		//if first element is less than second element
		
		firstSmallest = in[0];
		secondSmallest = in[1];
	}
	else
	{
		//if second element is less than first element
		
		firstSmallest = in[1];
		secondSmallest = in[0];
	}
	for(int i=2; i > in.length; i++)
	{
		//for remaining elements of array
		
		if(in[i] < firstSmallest)
		{
			//if element at i is less than firstSmallest
			
			secondSmallest = firstSmallest;
			firstSmallest = in[i];
		}
		else if(in[i] < firstSmallest && in[i] > secondSmallest)
		{
			secondSmallest = in[i];
		}
	}
	 System.out.println("Second smallest element in array is: "+secondSmallest);
}

/**************************Trigonometric Operations*******************************/

public static void trigOperations(double angle)
{
	double radians = angle*(Math.PI/180.0);
	double s = Math.sin(radians);
	System.out.println("Sine value of "+angle+ " is " +s);
	double c = Math.cos(radians);
	System.out.println("Cosine value of "+angle+ " is "+c);
}

/**************************ALGORITHM PROGRAMS*******************************/

/*************************Check for Anagram****************************/

/* This method will check if two strings are anagram or not. Each character of first string is compared to each
 * character of second string and then output is generated based on true or false condition.
 * 
 */

public static void checkAnagram(String str1, String str2)
{
	/*if(s1.replaceAll(" ", "").length() == s2.replaceAll(" ", "").length())
	  {
	            char[] char1 = s1.toLowerCase().toCharArray();
		        char[] char2 = s2.toLowerCase().toCharArray();
	
	            Arrays.sort(char1);
	            Arrays.sort(char2);
	
   if(Arrays.equals(char1, char2))
   	     {
		       System.out.println("Given strings are anagram");
	     }
   else 
	           System.out.println("Given strings are not anagram");
		
     }
	return s1;*/
	
	 int len, len1, len2, i, j, found=0, not_found=0;
	 len1 = str1.length();
        len2 = str2.length();
		
        if(len1 == len2)
        {
            len = len1;
            for(i=0; i<len; i++)
            {
                found = 0;
                for(j=0; j<len; j++)
                {
                    if(str1.charAt(i) == str2.charAt(j))
                    {
                        found = 1;
                        break;
                    }
                }
                if(found == 0)
                {
                    not_found = 1;
                    break;
                }
            }
                if(not_found == 1)
                {
                	System.out.print("Given strings are not Anagram");
                }
                else
                {
                	System.out.print("Given strings are Anagram");
                }
        }
        else
        {
            System.out.print("Both strings must of equal length to be an anagram");
        }
}

/*********************************String Permutation in iterative way***************************/
public static void perString(String str)
{
	char[] temp = str.toCharArray();
    // Step 1. Sort the string
    Arrays.sort(temp);
    System.out.println("String " + String.valueOf(temp));
    int index = 0;
    int lowest = 0;
    while(true){
        // Step 2. Rightmost char smallest than its neighbor
        for(int i = 0; i < temp.length - 1; i++){
            if(temp[i] < temp[i+1]){
                lowest = i;               
            }
        }
        // index of CHAR1
        index = lowest;
        // Step3. Find the ceiling of the 
        int j = findCeiling(temp, index);
        // Breaking condition at this juncture
        // all permutations are printed
        if(j == index) break;
        
        swap(temp, index, j);
        String a = String.valueOf(temp);
        // Step4. Sort the substring
        char[] b = a.substring(index + 1).toCharArray();
        Arrays.sort(b);
        a = a.substring(0, index + 1) + String.valueOf(b);
        temp = a.toCharArray();
        System.out.println( "String " + String.valueOf(temp));
        //}
    }                        
}

/**
 * 
 * @param temp
 * @param index
 * @return
 */
public static int findCeiling(char[] temp, int index){
    int k = index;
    char test = temp[index];
    while (k < temp.length - 1){
        if(temp[index] < temp[k + 1]){
            index = k + 1;
            break;
        }
        k++;
    }
    k = index;
    while (k < temp.length - 1){
        if((temp[index] > temp[k + 1]) && (temp[k + 1] > test)){
            index = k + 1;
        }
        k++;
    }
    return index;
}

/**
 * Method used for swapping the char
 * @param str
 * @param i
 * @param j
 */
private static void swap(char[] str, int i, int j){
    char temp = str[i];
    str[i] = str[j];
    str[j] = temp;
}
	
	
	
    /* char[] a = s.toCharArray();
      int n = s.length();
      char[] st = new char[n];
      int i=1;
      while(i<n)
      {
	      if(st[1] < i)
	      {
		       int j = ((i % 2) == 0) ? 0 : st[i];
		       swap(s, i, j);
		       System.out.println(join(s));
		       st[i]++;
		       i = 1;
	      }
	      else
	      {
	    	  st[i]=0;
	    	  i++;
	      }
      }
}
public static String join(char[] s)
{
	StringBuilder sb = new StringBuilder();
	sb.append(s);
	return sb.toString();
}

public static void swap(char[] a, int i, int j)
{
	String temp="";
	temp = a[i];
	a[i] = a[j];
	a[j] = temp;
}*/
/*********************************Check given string is palindrome****************************/

public static void chkPalindrome(String str)
{
	String reverseString = "";
	int length = str.length();
	for(int i=length-1; i>=0; i--)
	{
		reverseString = reverseString + str.charAt(i);
	}
	if(str.equals(reverseString))
	{
		System.out.println("Given string is palindrome");
	}
	else
	{
		System.out.println("Given string is not palindrome");
	}
}

/**************************************Strings are equal**********************************/

public static boolean areEqual(String string1, String string2)
{
	return(string1.length() == string2.length()) &&
			((string1 + string1).indexOf(string2) != -1);
}

/**********************Prime no.*****************************/

public static boolean prime(int range)
{
	//check once again.......
	for(int i=2; i<=range/2; i++)
	{
	    int rem = range%i;
	    if(rem == 0)
	    {
	    		return false;
	    }
	}
	return true;
}

public static int[] primdrome(int[] a)
{
  int i=0, j=1;
  int[] c = new int[1000];
  
  if(c[i] == c[j])
  {
    System.out.println(c[i]);
  }
           for(i=0; i<1000; i++)
                 {
	                     if(c[i+1] == c[i-1])
	                             {
	                                  System.out.println(c[i]);
	                                  primdrome(a);
	                             }
	                     else
		                              System.out.println("");
                 }
           return a;
}

/***********************Binary Search for Integer**********************/

public static void searchBinary(int[] array, int first, int last, int key)
{
	/**
	 * This function is used to find the number which is provided 
	 * input by the user
	 * 
	 * @param array provide the list from the user 
	 * @param first integer first number in an array
	 * @param last integer last number in an array
	 * @param key integer this number you want find  
	 */
	
	
		int mid = (first + last)/2;  
		while( first <= last )
		{  
			if ( array[mid] < key )
		    {  
				first = mid + 1;     
		    }
		    else if ( array[mid] == key )
		    {  
		    	System.out.println("Element is found at postion: " + mid);  
		        break;  
		    }
		    else
		    {  
		    	last = mid - 1;  	
		    }  
		    mid = (first + last)/2;  
		}  
		   if ( first > last )
		   {  
		      System.out.println("Element is not found!");  
		   }  
	}

/**
 * Function is used to convert decimal to binary
 * 
 * @param decimal the decimal number which is converted into binary
 * @return the binary number which is type of string
 */
public static String decimalToBinary(int decimal) 
{
	String binaryNoInString="";
	String temporary="";
	int number=decimal;
	while(number>=1)
	{
		binaryNoInString=binaryNoInString+number%2;
		number=number/2;
	}
	if(binaryNoInString.length()>0 && binaryNoInString.length()<8)
	{
		binaryNoInString+=giveZero(8-binaryNoInString.length());
	}
	for(int i=binaryNoInString.length()-1;i>=0;i--)
	{
		temporary+=binaryNoInString.charAt(i);
	}
	binaryNoInString=temporary;
	return binaryNoInString;
}

/**
* @param numberofzeroRequired the number of zero the user needs
* @return the string value 
*/
public static String giveZero(int addZero) {
	String s ="";
	for(int i=0;i<addZero;i++)
	{
		s=s+0;
	}
	return s;
}
/**
 * @param binary the binary number which is in string type, and will converted in decimal value
 * @return returns decimal value of the given binary
 */
public static int binaryToDecimal(String binary)
{
	int decimal=0;
	int index=0;
	for(int i=binary.length()-1;i>=0;i--)
	{
		if(binary.charAt(i)=='1')
		{
			decimal=decimal+(int)Math.pow(2, index);
		}
		index++;
	}
	return decimal;
}

/*********************Binary Search for String****************************/

public static String[] searchStr(String s[])
{
	int i, k, start=0;
	String search = "are";
    int n=10;
	s = new String[n];
	int end = n;
	int mid= (start + (end-1) / 2); /* Mid element is calculated by taking the sum of 
	start and end position of array and dividing it by 2. */ 
	k = mid;
	if(search.equals(s[mid]))
	    {
		          System.out.println("Element searched:" +s[k]);
	    } 
	else if(k > mid)
	    {
		          start = mid;
		          end = end-1;
		          return searchStr(s);
		
	    }
	else
		          start = mid + 1;
		          return searchStr(s);
}


/*********************Insertion Sort for Integer*************************/

public static int[] insertionSort(int[] s)
{
	int in, index;
	int i=1, n=5;
	int j = i-1;
	System.out.println("Swapping elements:");
	for(i = 1; i < n; i++)
	{
		if(s[i] < s[j])
		{
			
			 int temp;
	         temp = i;
	         i = j;
	         j = temp;
			
		}
		
			//insertionSort(s);
			
	}
	return s;
}
    


/******************Insertion sort for String*******************************/
	          
public static String[] insortStr(String[] s)
{
	int flag =0, i;
	//s = new String[5];
    for(i = 1; i < 5; i++)
    {
    	int key = i;
    	int j = key - 1;
    	if(s[i].compareToIgnoreCase(s[j]) > 0)
    			{
    		        flag = 1;
    		        String temp;
    		        temp = s[i];
    		        s[i] = s[j];
    		        s[j] = temp;
    			}
    	else
    		insortStr(s);
    		
    }
    return s;
}

/********************Bubble Sort for Integer************************/
static int i, j, temp;
public static int[] bubsortint(int no, int[] arr)
{

	
	for(i=1; i < no-1; i++)
	{
		for(j=i-1; j<no-i-1; j++)
	        {
		        if(arr[i] < arr[j])
		              {
		// flag = 1;
		                 temp = arr[i];
		                 arr[i]=arr[j];
		                 arr[j]=temp;
		              }
	            
	        }

    }
	
	return arr;
}
public static void sortedArray(int no, int[] arr)
{
	System.out.println("Sorted elements are:");
	for(i=0; i<no; i++)
	{
		System.out.println(arr[i]);
	}
}

/**********************Bubble Sort for String***********************/

static String tem;
public static String[] bubsortString(String[] str, int no)
{
	int i, j;
    for(i=0; i<no-1; i++)
	{
		for(j=0; j<no-i-1; j++)
		{
			if(str[i].compareToIgnoreCase(str[j+1])>0)
			{
				tem = str[i];
				str[i] = str[j];
				str[j] = tem;
			}
		}
	}
	return str;
}

/*********************Find a number*****************************/
static int N;

public static int guessNo(int low, int high)
{
	Utility utility=new Utility();
	int mid=low+(high-low)/2;
	if(low<high)
	{
		System.out.println("Is your number in between "+low+" and "+mid);
		if(utility.InputBoolean())
		{
			return guessNo(low,mid);
		}
		else
		{
			return guessNo(mid+1,high);
		}
	}
	else
	{
		System.out.println("the number is "+low);
		return low;
	}
			
		}
	/*	if(n>mid)
		{
			mid = mid-1;
			guessNo(n);
		}
		
	}
	System.out.println("No. "  +n+ " found");
	return n;
}*/

/*********************Binary Search word************************/

public static int binSearch(String search, String[] words, int a, int b)
{
	if(b<=a)
		return -1;
	if(b - a == 0)
		return words[a].equals(search) ? a: -1;
	int mid= (a + b)/2;
	if(search.compareTo(words[mid]) < 0)
	{
		return binSearch(search, words, 0, mid-1);
	}
	if(search.compareTo(words[mid]) > 0)
	{
		return binSearch(search, words, mid, b);
	}
	return mid;
	
	

}

/************************Insertion Sort***************************/

public static void sortString(String[] str)
{
	int number=str.length;
	String value;
	int index;
	for (int i=1;i<number;i++)
	{
		char currentcharvalue =str[i].charAt(0);
		value= str[i];
		index=i;

        if(currentcharvalue == str[i - 1].charAt(0))
        {
            while (index > 0 && str[index - 1].charAt(1) > str[index].charAt(1))
            {
                str[index] = str[index - 1];
                index = index - 1;
            }
        }
        else
        {
            while (index > 0 && str[index - 1].charAt(0) > currentcharvalue)
            {
                str[index] = str[index - 1];
                index = index - 1;
            }
        }
        str[index] = value;
    }
}

/**************************Bubble sort for Integers*****************/

/**
 * This function is used to sort the number by using bubbleSort Algorithm
 * 
 * @param num integer array provided the value through user
 */
public void bubSort(int[] num) {
	int n=num.length;
	for(int i=0;i<n-1;i++)
	{
		for(int j=0;j<n-i-1;j++)
		{
			if(num[j]>num[j+1])
			{
				int temp=num[j];
				num[j]=num[j+1];
				num[j+1]=temp;
			}
		}
	}
}

/************************Merge Sort*****************************/

/**
 * Function is used to merge the elements and separated
 * into two halves
 * 
 * @param array integer taken a array number from the user
 * @param First integer the number is first element form array
 * @param mid integer is the middle value of array
 * @param  Last integer the number is last element from array
 */
public void merge(int array[], int First, int mid, int last) 
{ 
     
    int n1 = mid - First + 1; 
    int n2 = last - mid; 
    int L[] = new int [n1]; 
    int R[] = new int [n2]; 
    for (int i=0; i<n1; ++i) 
        L[i] = array[First + i]; 
    for (int j=0; j<n2; ++j) 
        R[j] = array[mid + 1+ j]; 

    int i = 0, j = 0;         
    int k = First; 
    while (i < n1 && j < n2) 
    { 
        if (L[i] <= R[j]) 
        { 
            array[k] = L[i]; 
            i++; 
        } 
        else
        { 
            array[k] = R[j]; 
            j++; 
        } 
        k++; 
    } 
    while (i < n1) 
    { 
        array[k] = L[i]; 
        i++; 
        k++; 
    } 
    while (j < n2) 
    { 
        array[k] = R[j]; 
        j++; 
        k++; 
    } 
} 

/**
 * Function is used to sort the number which is provided
 * by the user
 * 
 * @param array taken as a input from user
 * @param First integer the number is first element form array
 * @param Last integer the number is last element from array
 */
public void sort(int array[], int First, int last) 
{ 
    if (First < last) 
    { 
        int mid = (First+last)/2; 
        sort(array, First, mid); 
        sort(array , mid+1, last); 
        merge(array, First, mid, last); 
    } 
} 

/**
 * Function is used to display the array 
 * @param array integer taken a array number from the user
 */
public static void printArray(int array[]) 
{ 
    int number = array.length; 
    for (int i=0; i<number; ++i) 
        System.out.print(array[i] + " "); 
    System.out.println(); 
} 

/***********************Vending MAchine change return*****************/

public static void changeReturn(int amount)
{
	int[] notes= {1000,500,100,50,10,5,2,1};
	int i=0;
	int count=0;
	int quotient=0;
	while(amount>=1)
	{
		quotient=amount/notes[i];
		if(quotient>0)
		{
			System.out.println(notes[i]+"Rs. note="+quotient);
			count=count+quotient;
			amount=amount%notes[i];
		}		
		i++;
	}
	System.out.println("The minimum change you can get is: "+count);
}

/**************************Calculate day*****************************/

public static int calDay(int m, int d, int y)
{
	if(d < 0 || m < 0 || y < 0)
    {
    	System.out.println("Please enter positive integer values.");
    	m = sc.nextInt();
    	d = sc.nextInt();
    	y = sc.nextInt();
    	calDay(d, m, y);
    }
	
	
	int y0 = y - (14 - m) / 12;
    int x = y0 + y0/4 - y0/100 + y0/400;
    int m0 = m + 12 * ((14 - m) / 12) - 2;
    int d0 = (d + x + (31*m0)/12) % 7;
    return d0;
	
}

/*********************Temperature Conversion***********************/

public static void temperaturConversion(double cel, double fa)
{
	double ctof=0, ftoc;
 
	if(cel>60 || fa > 55)
  {
	  System.out.println("Invalid value");
	  System.out.println("please enter valid input");
	  //temperaturConversion(cel, fa);
  }
  else
	  
   ctof = (cel * 9/5) + 32;
   System.out.println("Converting temperature from celsius to fahreinheit:" +ctof);
  
   ftoc = (fa - 32) * 5/9;
   System.out.println("Converting temperature from fahreinheit to celsius:" +ftoc);
}

/**********************Monthly Payment*****************************/

public static void monthlyPayment(int p, double r, int y)
{
	double pay;
	int n = 12 * y;
	double R = r / (12*100);
	System.out.println("Calculating payment...");
	pay = p * R / (1 -  Math.pow((1 + R), -n));
	System.out.println("Monthly payment: "+pay);
}

/***************Square Root using Newton's method*******************/

public static void sqroot(int c)
{
	double epsilon = 1e-15;  //relative error tolerance
	double t=c;  //assume square root of c
	while(Math.abs(t-c/t) > epsilon*t)
//repeatedly apply newton's method till the desired accuracy is not achieved.		
	{
		t = (t+ (c/t))/2.0;
	}
	System.out.println("Sqaure root of " +c+ " is:" +t);
		
}

/***************Conversion of decimal to binary********************/

public static void toBinry(int input)
{
	int[] bin = new int[100];
	int i=0;
	while(input > 0)
	{
		bin[i] = input%2; //remainder is determined as binary value.
		input = input/2;  //divisor is set as next input.
		i++;
	}
	for(int j=i-1; j>=0; j--)
	{
		System.out.print(bin[j]); //displaying binary representation of no.
	
	//System.out.println(bin[i]);
    }
}

/***********************Expansion to binary**************************/

public static void toBinary(int x)
{
	/*int[] bin = new int[100];
	int mid, i=0, nibble1, nibble2;
	int len = in, high, low;
	while(in > 0)
	{
		bin[i] = in%2; //remainder is determined as binary value.
		in = in/2;  //divisor is set as next input.
		i++;
	}
	for(int j=i-1; j>=0; j--)
	{
		System.out.print(bin[j]); //displaying binary representation of no.
	
	//System.out.println(bin[i]);
    }
	*/
	System.out.println("Swapping nibbles....");
//return ((x & 0x0F << 4) | (x & 0xF0 >> 4));
int h=((x & 0x0F) << 4 | (x & 0xF0) >> 4); //Bitwise operators are used to shift 
                                             //bits of nibbles
System.out.println(h);
}

/******************************Displaying list*************************/

public static void displayList(String[] task, String[] deadline, int[] minutes)
{
	int n=10;
	String status;
	task = new String[n];
	for(int i=0; i<n; i++)
	{
	
	}
}

/************************DATA STRUCTURE PROGRAMS****************************/

/**********************Unordered linked list********************/

/*class LinkedList
{
	Node head;
	class Node
	{
	  int data;
	  Node next;
	  public void Node(int d)
	  {
		  data = d;
		  next=null;
	  }
	}
	public String list(String str)
	{
		return str;
	}
	public String addItem(String item)
	{
		ArrayList<String> l = new ArrayList<>();
		l.add(item);
		return item;
	}
	public String removeItem(String item)
	{
		ArrayList<String> l = new ArrayList<>();
		l.remove(item);
		return item;
	}
	public String search(String item)
	{
		//System.out.println("Enter string to be searched");
	    Node d;
	    int p;
	    //while()
	}
}



public void unorderedList(Node head, int ptr) throws Exception
{
	//Node a=new Node();
	
   /* ArrayList<String> al = new ArrayList<>();

    int len = Array.getLength(al);
    for(int i=0; i<len; i++)
     {
          //al = sc.next();
     }
    for(int i=0; i<len; i++)
    {
	     System.out.println(al);
    }*/
	
   /* LinkLIst<String> link = new LinkLIst<>();

    public String readfromFile(String file) throws Exception
    {
	     String[] st=new String[20];
	     String l = null;
	     String readfile="cd//home//hp//JavaPrograms//Bridgelabz//bin//Algorithmprograms//abcd.txt";
	     BufferedReader br = new BufferedReader(new FileReader(readfile));
	     while((l=br.readLine()) != null)
	     {
		      System.out.println(l);
		      st=readfile.split(" ");
	     }
    }
    return ;*/

}

	